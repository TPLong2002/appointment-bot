import { StructuredTool } from '@langchain/core/tools';
import { z } from 'zod';
import { AppointmentBotService } from './appointment-bot.service';

// Schema cho t√¨m b√°c sƒ© theo t√™n
const findDoctorByNameSchema = z.object({
  doctorName: z.string().describe('T√™n b√°c sƒ© c·∫ßn t√¨m ki·∫øm'),
  doctorId: z.string().optional().describe('ID c·ªßa b√°c sƒ©'),
});

// Schema cho t√¨m khoa theo tri·ªáu ch·ª©ng
const findDepartmentBySymptomSchema = z.object({
  symptoms: z.string().describe('C√°c tri·ªáu ch·ª©ng c·ªßa b·ªánh nh√¢n'),
});

// Schema cho h√†nh ƒë·ªông ƒë·∫∑t l·ªãch kh√°m
const bookAppointmentSchema = z.object({
  patientName: z.string().describe('T√™n c·ªßa b·ªánh nh√¢n'),
  phoneNumber: z.string().describe('S·ªë ƒëi·ªán tho·∫°i c·ªßa b·ªánh nh√¢n'),
  appointmentDate: z.string().describe('Ng√†y h·∫πn kh√°m (ƒë·ªãnh d·∫°ng YYYY-MM-DD)'),
  appointmentTime: z.string().describe('Gi·ªù h·∫πn kh√°m (ƒë·ªãnh d·∫°ng HH:MM)'),
  symptoms: z.string().describe('Tri·ªáu ch·ª©ng ho·∫∑c l√Ω do kh√°m'),
  departmentId: z.string().optional().describe('ID c·ªßa khoa kh√°m (n·∫øu bi·∫øt)'),
  doctorId: z
    .string()
    .optional()
    .describe('ID c·ªßa b√°c sƒ© (n·∫øu b·ªánh nh√¢n c√≥ y√™u c·∫ßu b√°c sƒ© c·ª• th·ªÉ)'),
});

// Schema cho xem th√¥ng tin b√°c sƒ©
const getDoctorInfoSchema = z.object({
  doctorId: z.string().optional().describe('ID c·ªßa b√°c sƒ© c·∫ßn xem th√¥ng tin'),
  doctorName: z.string().optional().describe('T√™n c·ªßa b√°c sƒ© c·∫ßn t√¨m'),
  departmentId: z
    .string()
    .optional()
    .describe('ID c·ªßa khoa ƒë·ªÉ t√¨m danh s√°ch b√°c sƒ©'),
});

// Schema cho ƒë·ªïi b√°c sƒ©
const changeDoctorSchema = z.object({
  appointmentId: z.string().describe('ID c·ªßa l·ªãch h·∫πn c·∫ßn ƒë·ªïi b√°c sƒ©'),
  newDoctorId: z.string().describe('ID c·ªßa b√°c sƒ© m·ªõi'),
});

// Schema cho x√°c nh·∫≠n l·ªãch h·∫πn
const confirmAppointmentSchema = z.object({
  appointmentId: z.string().describe('ID c·ªßa l·ªãch h·∫πn c·∫ßn x√°c nh·∫≠n'),
});

// Tool ƒë·∫∑t l·ªãch kh√°m
export class BookAppointmentToConfirmTool extends StructuredTool {
  name = 'book_appointment_to_confirm';
  description =
    'D√πng ƒë·ªÉ t·∫°o l·ªãch h·∫πn kh√°m cho b·ªánh nh√¢n ƒë·ªÉ b·ªánh nh√¢n ki·ªÉm tra th√¥ng tin v√† x√°c nh·∫≠n l·∫°i.';
  schema = bookAppointmentSchema;

  constructor(private service: AppointmentBotService) {
    super();
  }

  async _call(input: z.infer<typeof bookAppointmentSchema>) {
    console.log(
      'BookAppointmentToConfirmTool is running',
      input.patientName,
      input.phoneNumber,
      input.appointmentDate,
      input.appointmentTime,
      input.symptoms,
      input.departmentId,
      input.doctorId,
    );
    return this.service.bookAppointment(
      input.patientName,
      input.phoneNumber,
      input.appointmentDate,
      input.appointmentTime,
      input.symptoms,
      input.departmentId,
      input.doctorId,
    );
  }
}

// Tool li·ªát k√™ danh s√°ch khoa
export class ListDepartmentsTool extends StructuredTool {
  name = 'list_departments';
  description = 'Li·ªát k√™ danh s√°ch c√°c khoa c·ªßa b·ªánh vi·ªán';
  schema = z.object({});

  constructor(private service: AppointmentBotService) {
    super();
  }

  async _call() {
    console.log('ListDepartmentsTool is running');
    return this.service.listDepartments();
  }
}

// Tool xem th√¥ng tin b√°c sƒ©
export class GetDoctorInfoTool extends StructuredTool {
  name = 'get_doctor';
  description =
    'This tool is used to get doctor details or doctor details list by department ID or doctor ID or doctor name.';
  schema = getDoctorInfoSchema;

  constructor(private service: AppointmentBotService) {
    super();
  }

  async _call(input: {
    doctorId?: string;
    doctorName?: string;
    departmentId: string;
  }) {
    console.log(
      'GetDoctorInfoTool is running:',
      input.doctorId,
      input.doctorName,
      input.departmentId,
    );
    return this.service.getDoctorInfo(
      input.doctorId,
      input.doctorName,
      input.departmentId,
    );
  }
}

// Tool ƒë·ªïi b√°c sƒ©
export class ChangeDoctorTool extends StructuredTool {
  name = 'change_doctor';
  description = 'Tool n√†y d√πng ƒë·ªÉ ƒë·ªïi b√°c sƒ©.';
  schema = changeDoctorSchema;

  constructor(private service: AppointmentBotService) {
    super();
  }

  async _call(input: { appointmentId: string; newDoctorId: string }) {
    console.log(
      'ChangeDoctorTool is running',
      input.appointmentId,
      input.newDoctorId,
    );
    return this.service.changeDoctor(input.appointmentId, input.newDoctorId);
  }
}

// Tool x√°c nh·∫≠n l·ªãch h·∫πn
export class ConfirmAppointmentTool extends StructuredTool {
  name = 'confirm_appointment';
  description =
    'Tool n√†y d√πng ƒë·ªÉ x√°c nh·∫≠n l·ªãch h·∫πn kh√°m sau khi ƒë√£ ki·ªÉm tra kƒ© th√¥ng tin. B·∫ÆT BU·ªòC d√πng khi ng∆∞·ªùi d√πng x√°c nh·∫≠n ƒë·∫∑t l·ªãch kh√°m';
  schema = confirmAppointmentSchema;

  constructor(private service: AppointmentBotService) {
    super();
  }

  async _call(input: { appointmentId: string }) {
    console.log('ConfirmAppointmentTool is running', input.appointmentId);
    return this.service.confirmAppointment(input.appointmentId);
  }
}

// Tool ki·ªÉm tra ng√†y tr·ªëng c·ªßa b√°c sƒ©
export class CheckDoctorAvailableDaysTool extends StructuredTool {
  name = 'check_doctor_available_days';
  description =
    'Tool n√†y d√πng ƒë·ªÉ ki·ªÉm tra c√°c ng√†y c√≤n l·ªãch tr·ªëng c·ªßa m·ªôt b√°c sƒ© c·ª• th·ªÉ. CH·ªà ƒê∆Ø·ª¢C D√ôNG KHI NG∆Ø·ªúI D√ôNG C√ì Y√äU C·∫¶U';
  schema = z.object({
    doctorId: z.string().describe('ID c·ªßa b√°c sƒ© c·∫ßn ki·ªÉm tra'),
  });

  constructor(private service: AppointmentBotService) {
    super();
  }

  async _call(input: { doctorId: string }) {
    console.log('CheckDoctorAvailableDaysTool is running', input.doctorId);

    // T√¨m th√¥ng tin b√°c sƒ© ƒë·ªÉ l∆∞u l·∫°i
    const doctor = this.service.doctors.find(
      (doc) => doc.id === input.doctorId,
    );
    if (doctor) {
      // C·∫≠p nh·∫≠t th√¥ng tin b√°c sƒ© v√†o lastSelectedDoctor
      this.service.lastSelectedDoctor = {
        doctorId: doctor.id,
        doctorName: doctor.name,
        departmentId: doctor.departmentId,
        date: '',
        time: '',
      };
      console.log(
        `Saved doctor to lastSelectedDoctor: ${doctor.id} - ${doctor.name}`,
      );
    }

    return this.service.checkDoctorAvailableDays(input.doctorId);
  }
}

// Tool ki·ªÉm tra gi·ªù tr·ªëng c·ªßa b√°c sƒ© trong m·ªôt ng√†y
export class CheckDoctorTimeSlotsTool extends StructuredTool {
  name = 'check_doctor_time_slots';
  description =
    'Ki·ªÉm tra c√°c khung gi·ªù c√≤n tr·ªëng c·ªßa m·ªôt b√°c sƒ© trong m·ªôt ng√†y c·ª• th·ªÉ. D√πng khi ng∆∞·ªùi d√πng mu·ªën bi·∫øt c√°c gi·ªù c√≤n tr·ªëng ƒë·ªÉ ƒë·∫∑t l·ªãch kh√°m v·ªõi m·ªôt b√°c sƒ© v√†o m·ªôt ng√†y c·ª• th·ªÉ. B·∫Øt bu·ªôc ph·∫£i d√πng c√¥ng c·ª• n√†y ƒë·ªÉ xem gi·ªù tr·ªëng khi ng∆∞·ªùi d√πng y√™u c·∫ßu ƒë·∫∑t l·ªãch v√†o m·ªôt ng√†y c·ª• th·ªÉ.';
  schema = z.object({
    doctorId: z.string().describe('ID c·ªßa b√°c sƒ© c·∫ßn ki·ªÉm tra'),
    date: z.string().describe('Ng√†y c·∫ßn ki·ªÉm tra (ƒë·ªãnh d·∫°ng YYYY-MM-DD)'),
  });

  constructor(private service: AppointmentBotService) {
    super();
  }

  async _call(input: { doctorId: string; date: string }) {
    console.log('CheckDoctorTimeSlotsTool is running');
    console.log(
      'üöÄ ~ CheckDoctorTimeSlotsTool ~ _call ~ doctorId:',
      input.doctorId,
      input.date,
    );

    // T√¨m th√¥ng tin b√°c sƒ© ƒë·ªÉ l∆∞u l·∫°i
    const doctor = this.service.doctors.find(
      (doc) => doc.id === input.doctorId,
    );
    if (doctor) {
      // C·∫≠p nh·∫≠t th√¥ng tin b√°c sƒ© v√†o lastSelectedDoctor
      this.service.lastSelectedDoctor = {
        doctorId: doctor.id,
        doctorName: doctor.name,
        departmentId: doctor.departmentId,
        date: input.date,
        time: '',
      };
      console.log(
        `Saved doctor and date to lastSelectedDoctor: ${doctor.id} - ${doctor.name} - ${input.date}`,
      );
    }

    return this.service.checkDoctorTimeSlots(input.doctorId, input.date);
  }
}

// Tool t√¨m b√°c sƒ© theo t√™n
export class FindDoctorByNameTool extends StructuredTool {
  name = 'find_doctor_by_name';
  description =
    'T√¨m ki·∫øm b√°c sƒ© theo t√™n. N·∫øu c√≥ nhi·ªÅu b√°c sƒ© c√πng t√™n, s·∫Ω hi·ªÉn th·ªã giao di·ªán ƒë·ªÉ ch·ªçn. D√πng khi ng∆∞·ªùi d√πng mu·ªën t√¨m th√¥ng tin v·ªÅ m·ªôt b√°c sƒ© c·ª• th·ªÉ.';
  schema = findDoctorByNameSchema;

  constructor(private service: AppointmentBotService) {
    super();
  }

  async _call(input: { doctorName: string }) {
    console.log('FindDoctorByNameTool is running', input.doctorName);
    return this.service.findDoctorByName(input.doctorName);
  }
}

// Tool t√¨m khoa d·ª±a tr√™n tri·ªáu ch·ª©ng
export class FindDepartmentBySymptomsTool extends StructuredTool {
  name = 'find_department_by_symptoms';
  description =
    'G·ª£i √Ω khoa t·ª´ tri·ªáu ch·ª©ng c·ªßa b·ªánh nh√¢n. B·∫ÆT BU·ªòC d√πng g√¨ b·ªánh nh√¢n g·ª≠i tri·ªáu ch·ª©ng v√≠ d·ª• nh∆∞: T√¥i b·ªã, T√¥i ƒëau, T√¥i c√≥ tri·ªáu ch·ª©ng...';
  schema = findDepartmentBySymptomSchema;

  constructor(private service: AppointmentBotService) {
    super();
  }

  async _call(input: { symptoms: string }) {
    console.log('FindDepartmentBySymptomsTool is running', input.symptoms);
    return this.service.findDepartmentBySymptoms(input.symptoms);
  }
}
